// <auto-generated />
using System;
using Equinor.Lighthouse.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Equinor.Lighthouse.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220406134918_adjustPortalSettings")]
    partial class adjustPortalSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ActivityAggregate.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Acs")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BasePlannedProgress")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Bef")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Bes")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Besa")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Cancelled")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Csh")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CurrentAf")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentAs")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CurrentPlannedProgress")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentProgress")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Du")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Ef")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Es")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Esa")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpendedQuantity")
                        .HasColumnType("float");

                    b.Property<string>("F10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("JobPackEstimatedQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Lf")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Ls")
                        .HasColumnType("datetime2");

                    b.Property<long>("NetId")
                        .HasColumnType("bigint");

                    b.Property<double?>("OnTarget")
                        .HasColumnType("float");

                    b.Property<string>("Plant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R10Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R10SubDiscipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R11Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R11Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R12Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R12ProjectMilestone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R13ActivityRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R13Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R14Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R14ProjectPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R15Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R15Fav")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R16Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R16Fas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R17Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R17Pau")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R18Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R18Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R19Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R19SapWbs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R1Wbs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R20Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R20Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R21Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R21SubSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R22Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R22MaterialAllocationPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R23ContractorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R23Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R24CostCenterDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R24Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R25Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R25McPk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R26Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R26TagTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R27Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R27SiteLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R28Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R28WorkType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R29Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R29JobDisc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R2MainCat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R30Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R30PersonalSortField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R3Discipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R4Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R4MainArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R5Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R5SubArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R6Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R6System")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R7CommPk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R7Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R8Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R8ProcurementPack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R9Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("R9Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rsh")
                        .HasColumnType("float");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Tse")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ActivityAggregate.LciObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cable_F_Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cable_F_Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cable_T_Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cable_T_Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComPkg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("EstimatedQuantity")
                        .HasColumnType("float");

                    b.Property<double?>("InstalledQuantity")
                        .HasColumnType("float");

                    b.Property<string>("McPkg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PipeTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RemainingHours")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTypeNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("LciObjects");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Oid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Oid")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.SavedFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DefaultFilter")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SavedFilters");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PortalSettingsAggregate.Favorite", b =>
                {
                    b.Property<Guid>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppPreset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AzureOid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FavoriteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("AzureOid");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PortalSettingsAggregate.PortalSetting", b =>
                {
                    b.Property<Guid>("AzureOid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AzureOid");

                    b.ToTable("PortalSettings");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ProjectAggregate.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Projects_Name_ASC");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name"), new[] { "Plant" });

                    b.HasIndex("Plant")
                        .HasDatabaseName("IX_Projects_Plant_ASC");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Plant"), new[] { "Name", "IsClosed", "CreatedAtUtc", "ModifiedAtUtc" });

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ResponsibleAggregate.Responsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Plant")
                        .HasDatabaseName("IX_Responsibles_Plant_ASC");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Plant"), new[] { "CreatedAtUtc", "IsVoided", "ModifiedAtUtc", "Description" });

                    b.ToTable("Responsibles");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.SettingAggregate.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("DateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.SavedFilter", b =>
                {
                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany("SavedFilters")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.ProjectAggregate.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PortalSettingsAggregate.Favorite", b =>
                {
                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PortalSettingsAggregate.PortalSetting", null)
                        .WithMany("Favorites")
                        .HasForeignKey("AzureOid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ProjectAggregate.Project", b =>
                {
                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.ResponsibleAggregate.Responsible", b =>
                {
                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", null)
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.Navigation("SavedFilters");
                });

            modelBuilder.Entity("Equinor.Lighthouse.Api.Domain.AggregateModels.PortalSettingsAggregate.PortalSetting", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
